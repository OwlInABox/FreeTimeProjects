
OLA_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007df  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ac  00000000  00000000  00000a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_11>:

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
  PORTB &= ~(0x21);
  90:	85 b1       	in	r24, 0x05	; 5
  92:	8e 7d       	andi	r24, 0xDE	; 222
  94:	85 b9       	out	0x05, r24	; 5
  TCCR1B &= ~(0x05);
  96:	e1 e8       	ldi	r30, 0x81	; 129
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8a 7f       	andi	r24, 0xFA	; 250
  9e:	80 83       	st	Z, r24
}
  a0:	ff 91       	pop	r31
  a2:	ef 91       	pop	r30
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_1>:

ISR(INT0_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	// when activated turn on LED
	PORTB |= 0x21; // toggles PB0 and PB5 between output low and output high
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	81 62       	ori	r24, 0x21	; 33
  c4:	85 b9       	out	0x05, r24	; 5
	TCCR1B |= 0x05; // sets prescale and starts timer
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	85 60       	ori	r24, 0x05	; 5
  ce:	80 83       	st	Z, r24
	
	
	 
	
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:

int main(void)
{
    
	
	interruptSetup();
  e0:	0e 94 75 00 	call	0xea	; 0xea <interruptSetup>
	registerSetup();
  e4:	0e 94 89 00 	call	0x112	; 0x112 <registerSetup>
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x8>

000000ea <interruptSetup>:
#include <avr/interrupt.h>


void interruptSetup(void)
{
	cli(); // clear interrupts
  ea:	f8 94       	cli
	EICRA = 0x03; // PD2. external interrupt. sents a interrupt signal when a button is pressed
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0x01; // PD2. enables interrupt 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8d bb       	out	0x1d, r24	; 29
	OCR1A = 0x3D08; // waits for 2 sec. clk=8Mhz prescale=1024 
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	9d e3       	ldi	r25, 0x3D	; 61
  fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B = 0x08; // set timer1 CTC mode 4
 102:	88 e0       	ldi	r24, 0x08	; 8
 104:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = 0x02;  // clockmask mode 4
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	
  
	sei(); // enables global interrupts
 10e:	78 94       	sei
 110:	08 95       	ret

00000112 <registerSetup>:
	
}

void registerSetup(void)
{
	PORTB = 0x00;// set PB pins to be output low(sink)
 112:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x21; // PB0 and  PB5 are set to output
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	84 b9       	out	0x04, r24	; 4
	
	DDRD = 0x00; // set PD0-PD7 to input
 118:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04; // set PD2 to input with pull-up
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	8b b9       	out	0x0b, r24	; 11
	PIND = 0x04; // inverts  PD2
 11e:	89 b9       	out	0x09, r24	; 9
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
